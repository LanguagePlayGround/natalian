
[[!_comment format=mdwn
 username="Tom Godber"
 subject="194.126.102.178"
 date="2008-09-18 09:38:54"
 content="""
<p>I think the argument of applications vs. web is a lot more nuanced than you allow for here.  Some types of service are better <span class="caps">SMS</span> driven, some as standalone apps, some purely web-based, some as a hybrid and some will simply never actually work in the real world.</p>

<p>Users want easy to use services which make their lives better and are context-relevant. I seriously doubt people on the street are clamouring for &#8216;One Web&#8217; as you suggest, and the success (and clearly superior usability) of eg. iPhone-optimised versions of sites like GMail and Facebook show that &#8216;one web&#8217; is often not actually in the user&#8217;s interests.  The even greater improvements achievable with dedicated apps &#8211; again look at for example Google Maps on the iPhone &#8211; further suggest this is wishful thinking, and one size does not fit all.</p>

<p>The fragmentation issue is a thorny one. People mean many different things, and usually when applied to Java they don&#8217;t actually code Java and get it wrong.  Mobile fragmentation comes from a huge range of issues, from bugs and inconsistencies, different screen sizes (a problem for any application that wants to look better than a 1996 web page), different interaction mechanisms (touchscreens, qwerty and numeric keypads are not alike), different hardware features (only some phones have <span class="caps">GPS</span>, camera, whatever) etc.  These issues apply equally to browsers and standalone applications.</p>

<p>You may &#8220;like to think QA and awareness will be much better on the Web&#8221; but I think the qualifier you use indicates how much fo this is optimism in the face of all experience to date about the quality of software shipped on mobile phones, whatever it is.</p>

<p>For all of these factors, the mobile browser world is extremely fragmented <strong>already</strong> when viewed as a whole &#8211; and even if you ignore 85% of users and look only at smartphones, it is still fragmented. There are many bugs even in rendering, and they don&#8217;t get fixed because updating firmware is still non-trivial.  Once you start looking at scripting the picture gets worse:<br />
1) There are no standards for things like camera access, and all mobile history suggests that will lead to manufacturers adding proprietary extensions. I will stand corrected if yuo can point me to a standards body that has published a standard and has Nokia, Samsung, Apple et al signed up already.<br />
2) There are and will continue to be differences in performance and implementation specifics, just like desktop browsers but with more variants &#8211; even when the underlying rendering engine is the same eg. Webkit.<br />
3) Offline scripting engines like Google Gears really make things worse.  A chat with one of the Gears guys at the previous MoMo London was revealing &#8211; Apple will never have Gears on the iPhone, which means instant fragmentation. They only offer it for Windows Mobile now but he hinted at Symbian support too &#8211; but Google will <span class="caps">NOT</span> pursue a strategy of bundling on devices, which means users must perform a complicated native app installation to get Gears. How many users will do this? few I think &#8211; and it leaves feature phone users, vastly outnumbering their smartphone brethren, out in the cold. Hard to define that as not being fragmentation.</p>

<p>There are two ways to work around these handset differences &#8211; downloading a single big script which contains variants for everything (the current desktop way) or running servers which autoswitch based on UA and a database like the <span class="caps">WURFL</span>.  The former approach means more data shifted (which is still not free for most people, and certainly isn&#8217;t instant) with a greater memory and performance overhead when it arrives.  The latter will risk becoming a rat&#8217;s nest of script conflicts &#8211; scripting is lovely for quick dev but a nightmare for maintenance of multiple different library versions.</p>

<p>Even ignoring all of this, the kind of AJAXy webapps people use today are feasible because PCs have effectively free always-on high bandwidth network connections, effectively free mains electricity supplies or laptop-style battery expectations, and fast processors tied to loads of memory and even more storage for cacheing, and a single consistent UI model with mice, full keyboards and big screens.  <span class="caps">XML</span> may carry a huge overhead over the network, and scripting may consume a vast amount of clock cycles, but it doesn&#8217;t matter because both are plentiful. A drag and drop UI model, like Flickr&#8217;s photo organising, can work on Safari on the Mac and also IE on a PC with only a few code tweaks.  Does this sound like a mobile device?  Some of these areas are improving, some aren&#8217;t, but it doesn&#8217;t avoid the fact that <span class="caps">AJAX</span> webapps are not a natural fit for handsets.</p>

<p>The browser is a natural fit for a huge number of apps, and improvements in browsers are certainly very welcome (and overdue).  it isn&#8217;t the be-all and end-all of the mobile user experience though, and developers who believe it is are to some extent working for the world they wish existed, not the one that does exist.  Your optimism is commendable and you do state at the end you are looking to the future &#8211; but your dream is some way off and all history suggests that fragmentation will get worse before it gets better.</p>

<p>I&#8217;ve written a few blog posts on these subjects over at blog.masabi.com and am happy to discuss further if you are interested.</p>
"""]]
